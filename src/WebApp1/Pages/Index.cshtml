@page
@model IndexModel
@{
    ViewData["Title"] = "Home";
}

<div class="row mb-auto">
    <div class="col-md-4">
        <div class="row no-gutters border mb-4">
            <div class="col p-4 mb-4 ">
                <p class="card-text">
                    PCR2 PoC is a sample application that
                        demonstrates how to use Entity Framework Core in an
                        ASP.NET Core Razor Pages web app and an Azure Function App.
                    
                    <ul>

                        <li>Users access the Web site via a locked down Application Gateway.
                            They can connect through internal network (On-premises & VPN + P2S VPN to Azure)
                            and through the public internet.</li>
                        <li>The Function Apps access the internet through VNet integration and a NAT Gateway
                            (so the Public IP is known and constant for IP filtering).
                        </li>
                        <li>For authentication, it uses the App Service authentication provider,
                            linked to Microsoft Identity provider / Azure AD, using a registered app granted user.read permission on the Graph API.
                        </li>
                    </ul>
                </p>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="row no-gutters border mb-4">
            <div class="col p-4 d-flex flex-column position-static">
                <p class="card-text mb-auto">
                            It uses:
                            <ul>
                                <li>Windows App Service,</li>
                                <li>Azure Function App,</li>
                                <li>Azure Storage Account,</li>
                                <li>Azure Virtual Network,</li>
                                <li>Private Endpoints,</li>
                                <li>Private DNS Zones,</li>
                                <li>AI Anomaly Detector,</li>
                                <li>Managed Identity,</li>
                                <li>Application Gateway,</li>
                                <li>Azure Key vault,</li>
                                <li>Microsoft Defender for Cloud,</li>
                                <li>.NET Core 6+,</li>
                                <li>Microsoft Authentication,</li>
                                <li>Entity Framework,</li>
                                <li>WinSCP .NET FTP Client,</li>
                            </ul>

                </p>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="row no-gutters border mb-4">
            <div class="col p-4 d-flex flex-column">
                <p class="card-text mb-auto">
The Function Apps are timer-triggered based:
                            <ul>
                                <li>
                                    They pull, process and create files between
                                    2 Storage Accounts (Drop and Archive),
                                </li>
                                <li>
                                    They manipulate SQL Server databases through Dependency
                                    Injection of Entity Framework in the Function (not using inbound & outbound bindings),
                                </li>
                                <li>
                                    They connect to a public SFTP server to read its content,
                                </li>
                                <li>
                                    An Anomaly Detector is setup to privately detect data series anomalies,
                                </li>
                            </ul>
                            The App Service, Function App and Azure SQL Server are accessed individually with
                            Private Endpoints, enabling SCM (Kudu) and Deployment endpoints for developers and
                            Azure DevOps/GitHub Actions Pipelines (using self-hosted agents/runners).


                </p>
                <p>
                    @*                    <a href="https://github.com/dotnet/AspNetCore.Docs/tree/main/aspnetcore/data/ef-rp/intro/samples" class="stretched-link">See project source code</a>
*@                </p>
            </div>
        </div>
    </div>
</div>
<div class="row mb-auto">
    @if (User.Identity?.IsAuthenticated == true)
    {
    <div class="row mb-auto">
        <p>
            <ul>
                <li>
                    Client IP: @Model.RemoteIp, Scheme: @Model.Scheme,
                </li>
                <li>
                    Host header: @Model.HostHeader,
                </li>
                <li>
                    X-Forwarded-For: @Model.XForwardedFor,
                </li>
@*                 <li>
                    X-Coming-From: @Model.XComingFrom,
                </li>
 *@             <li>
                    Server IP: @Model.LocalIp, Host: @Model.Host.
                </li>
            </ul>
        </p>
    </div>
    }
</div>
